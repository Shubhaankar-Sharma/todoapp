// Code generated by sqlc. DO NOT EDIT.
// source: todo.sql

package db

import (
	"context"
	"time"
)

const createToDo = `-- name: CreateToDo :exec
INSERT INTO todo (body, end_date, user_id, done)
VALUES ($1, $2, $3, $4)
`

type CreateToDoParams struct {
	Body    string      `json:"body"`
	EndDate time.Time   `json:"endDate"`
	UserID  int32       `json:"userID"`
	Done    interface{} `json:"done"`
}

func (q *Queries) CreateToDo(ctx context.Context, arg CreateToDoParams) error {
	_, err := q.db.ExecContext(ctx, createToDo,
		arg.Body,
		arg.EndDate,
		arg.UserID,
		arg.Done,
	)
	return err
}

const deleteToDo = `-- name: DeleteToDo :exec
DELETE
FROM todo
WHERE id = $1
`

func (q *Queries) DeleteToDo(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteToDo, id)
	return err
}

const getToDoAll = `-- name: GetToDoAll :many
SELECT id, body, end_date, user_id, done
FROM todo
WHERE user_id = $1
ORDER BY end_date
`

func (q *Queries) GetToDoAll(ctx context.Context, userID int32) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getToDoAll, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.EndDate,
			&i.UserID,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchToDo = `-- name: PatchToDo :exec
UPDATE todo
SET body=$1,
    end_date=$2
WHERE id = $3
`

type PatchToDoParams struct {
	Body    string    `json:"body"`
	EndDate time.Time `json:"endDate"`
	ID      int32     `json:"id"`
}

func (q *Queries) PatchToDo(ctx context.Context, arg PatchToDoParams) error {
	_, err := q.db.ExecContext(ctx, patchToDo, arg.Body, arg.EndDate, arg.ID)
	return err
}
